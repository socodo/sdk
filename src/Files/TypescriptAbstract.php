<?php

namespace Socodo\SDK\Files;

use Socodo\SDK\Exceptions\FileResolutionException;

abstract class TypescriptAbstract extends FileAbstract
{
    /** @var string Typescript item name. */
    protected string $name;

    /** @var array Typescript item data. */
    protected array $data;

    /**
     * Constructor.
     *
     * @param string $name
     * @param array $data
     */
    public function __construct (string $name, array $data)
    {
        $this->name = $name;
        $this->data = $data;
    }

    /**
     * Abandon to call this method.
     * File path will be auto generated by referring name.
     *
     * @param string $filePath
     * @return void
     */
    public function setFilePath (string $filePath): void
    {
        throw new FileResolutionException(static::class . '::setFilePath() Cannot set file path, it will be auto generated by referring name.');
    }

    /**
     * Compile comment string.
     *
     * @param array{
     *     description: array<string>,
     *     annotations: array<string, string<string>>,
     *     return: ?array{
     *         type: string,
     *         description: array<string>
     *     },
     *     parameters: ?array<string, array{
     *         type: string,
     *         description: array<string>
     *     }>
     * } $data
     * @return string
     */
    protected function compileComment (array $data): string
    {
        $data['description'] = $this->trimArray($data['description']);
        if (empty($data['description']) && empty($data['annotations']) && empty($data['parameters']) && empty($data['return']))
        {
            return '';
        }

        $descriptionLine = [];
        foreach ($data['description'] as $line)
        {
            $descriptionLine[] = ' * ' . $line;
        }

        $lines = [];
        if (isset($data['parameters']))
        {
            foreach ($data['parameters'] as $name => $innerData)
            {
                $prefix = '';
                $innerData['description'] = $this->trimArray($innerData['description']);
                foreach ($innerData['description'] as $i => $line)
                {
                    if ($i === 0)
                    {
                        $prefix = ' * @param ' . $name . ' {' . $innerData['type'] . '} ';
                        $lines[] = $prefix . $line;

                        $prefix = str_repeat(' ', strlen($prefix) - 2);
                        continue;
                    }

                    $lines[] = ' *' . $prefix . $line;
                }
            }
        }

        if (isset($data['return']))
        {
            $prefix = '';
            $data['return']['description'] = $this->trimArray($data['return']['description']);
            foreach ($data['return']['description'] as $i => $line)
            {
                if ($i === 0)
                {
                    $prefix = ' * @return {' . $data['return']['type'] . '} ';
                    $lines[] = $prefix . $line;

                    $prefix = str_repeat(' ', strlen($prefix) - 2);
                    continue;
                }

                $lines[] = ' *' . $prefix . $line;
            }
        }

        foreach ($data['annotations'] as $name => $innerLines)
        {
            $innerLines = $this->trimArray($innerLines);
            foreach ($innerLines as $line)
            {
                $lines[] = ' * @' . $name . ' ' . $line;
            }
        }

        if (!empty($lines))
        {
            $descriptionLine[] = ' *';
        }
        $lines = [ '/**', ...$descriptionLine, ...$lines, ' */' ];
        return implode("\n", $lines);
    }

    /**
     * Trim array.
     *
     * @param array $arr
     * @return array
     */
    protected function trimArray (array $arr): array
    {
        foreach ($arr as $key => $line)
        {
            if (trim($line) !== '')
            {
                break;
            }

            unset($arr[$key]);
        }

        $arr = array_reverse($arr);
        foreach ($arr as $key => $line)
        {
            if (trim($line) !== '')
            {
                break;
            }

            unset($arr[$key]);
        }

        return array_values(array_reverse($arr));
    }

        /**
     * Add indent to (multi-line) string.
     *
     * @param string $content
     * @param int $indent
     * @return string
     */
    protected function addIndent (string $content, int $indent): string
    {
        if (trim($content) === '')
        {
            return '';
        }

        $content = explode("\n", $content);
        $content = array_map(static function (string $line) use ($indent) {
            return str_repeat('    ', $indent) . $line;
        }, $content);
        return implode("\n", $content);
    }
}